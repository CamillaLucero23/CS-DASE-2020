library(readr)
Auto <- read_csv("CSV files/Auto.csv", col_types = cols(horsepower = col_character()))
View(Auto)
library(readr)
Auto <- read_csv("CSV files/Auto.csv")
View(Auto)
typeof(auto)
typeof(auto)
auto = Auto
typeof(auto)
#find class of auto
class(auto)
#Dimensions of Auto dataset
nrow(auto)
ncol(auto)
#Initial Dimensions of Auto data set
dim(auto) #"397 rows"
#omit na data and display dimensions again
auto = na.omit(auto)
dim(auto)
#omit na data and display dimensions again
newAuto = na.omit(auto)
dim(newAuto)
#Initial Dimensions of Auto data set
dim(auto) #"397 rows, 9 columns"
#omit na data and display dimensions again
newAuto = na.omit(auto)
dim(newAuto)
#omit na data and display dimensions again
newAuto = omit(auto)
dim(newAuto) #"397 rows, 9 columns"
names(auto)
attach(auto.mpg)
attach(mpg)
plot(mpg,cylinders)
plot("mpg","cylinders")
plot(cylinders,mpg, "Number of Cylinders", "Miles Per Gallon")
#Access auto without invoking a function
attach(auto)
plot(auto.cylinders,mpg, "Number of Cylinders", "Miles Per Gallon")
#Access auto without invoking a function
attach(Auto)
plot(cylinders,mpg, "Number of Cylinders", "Miles Per Gallon")
#plot values
plot(cylinders, mpg, "Number of Cylinders", "Miles Per Gallon", xlim = c(max(cylinders),min(cylinders)),ylim = c(max(mpg),min(mpg)))
#plot values
plot(cylinders, mpg, xlabel = "Number of Cylinders", ylabel = "Miles Per Gallon", xlim = c(max(cylinders),min(cylinders)),ylim = c(max(mpg),min(mpg)))
#plot values
plot(mpg,cylinders, xlabel = "Number of Cylinders", ylabel = "Miles Per Gallon", ylim = c(max(cylinders),min(cylinders)),x = c(max(mpg),min(mpg)))
#plot values
plot(mpg, cylinders)
#plot values
plot(cylinders, mpg)
cylindersAsFactor = as_factor(cylinders)
cylindersAsFactor = asfactor(cylinders)
cylindersAsFactor = as.factor(cylinders)
#plot again
plot(cylindersAsFactor, mpg, col = "green", xlab = "Cylinders", ylab = "MPG" )
hist(mpg,col = "green", breaks = 10)
#generate pairs
pairs(mpg,displacement, horsepower, weight, acceleration)
#generate pairs
pairs(mpg,displacement, as.double(horsepower), weight, acceleration)
#generate pairs
pairs(mpg,displacement, na.omit(as.double(horsepower)) , weight, acceleration)
#generate pairs
pairs(mpg,displacement,weight, acceleration)
#generate pairs
pairs(mpg,displacement,acceleration)
#generate pairs
pairs(mpg,displacement)
pairs(infoForPairs)
#generate pairs
infoForPairs = data.frame(mpg, displacement, acceleration, horsepower, weight, accerlation)
#generate pairs
infoForPairs = data.frame(mpg, displacement, acceleration, horsepower, weight, accerlation)
#generate pairs
infoForPairs = data.frame(mpg, displacement, acceleration, horsepower, weight, accerlation)
#generate pairs
infoForPairs = data.frame(mpg, displacement, acceleration, horsepower, weight)
pairs(infoForPairs)
newAuto = na.omit(auto)
as.double(auto$horsepower)
newAuto = na.omit(auto)
dim(newAuto) #"397 rows, 9 columns" Whatever data that was N/A did not occupy
#displays names of all variables in auto
names(auto) #"[1] "mpg"          "cylinders"    "displacement" "horsepower"
#Access Auto without invoking a function
attach(Auto) #The following objects are masked from auto:
#plot initial values
plot(cylinders, mpg)
#convert cylinder to factor
cylindersAsFactor = as.factor(cylinders)
#plot again
plot(cylindersAsFactor, mpg, col = "green", xlab = "Cylinders", ylab = "MPG" )
#generate histogram of mpg
hist(mpg,col = "green", breaks = 10)
#generate pairs
infoForPairs = data.frame(mpg, displacement, acceleration, horsepower, weight)
pairs(infoForPairs)
#generate pairs
as.double(horsepower)
na.omit(horsepower)
infoForPairs = data.frame(mpg, displacement, acceleration, horsepower, weight)
pairs(infoForPairs)
#generate pairs
infoForPairs = data.frame( mpg, displacement, acceleration, horsepower, weight)
pairs(infoForPairs)
#generate pairs
na.exclude(horsepower)
infoForPairs = data.frame( mpg, displacement, acceleration, horsepower, weight)
pairs(infoForPairs)
infoForPairs = data.frame( mpg, displacement, acceleration, horsepowerEdit , weight)
#generate pairs
horsepowerEdit = na.exclude(horsepower)
infoForPairs = data.frame( mpg, displacement, acceleration, horsepowerEdit , weight)
pairs(infoForPairs)
horsepowerEdit = na.omit(as.double(horsepower))
infoForPairs = data.frame( mpg, displacement, acceleration, horsepowerEdit , weight)
pairs(infoForPairs)
horsepowerEdit = na.exclude(as.double(horsepower))
infoForPairs = data.frame( mpg, displacement, acceleration, horsepowerEdit , weight)
pairs(infoForPairs)
horsepowerEdit = as.double(horsepower)
infoForPairs = data.frame( mpg, displacement, acceleration, horsepowerEdit , weight)
pairs(infoForPairs)
#Display Descriptive Stats.
summary(auto)
#Display Descriptive Stats.
summary(Auto)
summary(horsepowerEdit)
#omit non applicable data and display dimensions again
auto = na.omit(auto)#omit any na's
dim(auto) #"397 rows, 9 columns" Whatever data that was N/A did not occupy
#Display Descriptive Stats.
summary(Auto)
View(auto)
#omit non applicable data and display dimensions again
auto = na.omit(auto)#omit any na's
#omit non applicable data and display dimensions again
auto = na.omit(auto)#omit any na's
dim(auto) #"397 rows, 9 columns" Whatever data that was N/A did not occupy
View(auto)
#omit non applicable data and display dimensions again
as.integer(auto$horsepower)
auto = na.omit(auto)#omit any na's
dim(auto) #"397 rows, 9 columns" Whatever data that was N/A did not occupy
#omit non applicable data and display dimensions again
auto$horsepower = as.integer(auto$horsepower)
auto = na.omit(auto)#omit any na's
dim(auto) #"397 rows, 9 columns" Whatever data that was N/A did not occupy
source("C:/Classes/2023-2024/CS 2020/Homework/CS-DASE-2020/midterm_camilla_lucero.R")
install.packages(nycflights13)
install.packages("nycflights13")
flightsDataSet = nycflights13::flights
View(flightsDataSet)
View(flightsDataSet)
library(dplyr)
gc()
#filter out all flights that had departure delays of 12 or more hours
#and arrival delays of 18 hours or more
delayedFlightsData = filter(flightsDataSet, dep_delay >= 12 || arr_delay >= 18)
rlang::last_trace()
#filter out all flights that had departure delays of 12 or more hours
#and arrival delays of 18 hours or more
delayedFlightsData = filter(flightsDataSet, dep_delay >= 12 | arr_delay >= 18)
View(delayedFlightsData)
View(infoForPairs)
View(delayedFlightsData)
#filter out all flights that had departure delays of 12 or more hours
#and arrival delays of 18 hours or more
delayedFlightsData = filter(flightsDataSet, dep_delay >= 12 | arr_delay >= 18)
install.packages("nycflights13")
install.packages("nycflights13")
library(dplyr)
flightsDataSet = nycflights13::flights
View(flightsDataSet)
#filter out all flights that had departure delays of 12 or more hours
#and arrival delays of 18 hours or more
delayedFlightsData = filter(flightsDataSet, dep_delay >= 12 | arr_delay >= 18)
#filter out all flights that departed in the Summer (July, Aug, Sept) that are operated
#by JetBlue ("B6") that flew from JFK to MIA or BQN
jetBlueFlightsData = filter(flightsDataSet, month >= 7 | month <=9 & carrier == "B6"
& origin == "JFK" & dest == "MIA" | dest == "BQN" )
View(jetBlueFlightsData)
#filter out all flights that departed in the Summer (July, Aug, Sept) that are operated
#by JetBlue ("B6") that flew from JFK to MIA or BQN
jetBlueFlightsData = filter(flightsDataSet, month >= 7 | month <=9 ) # Get month
View(jetBlueFlightsData)
#filter out all flights that departed in the Summer (July, Aug, Sept) that are operated
#by JetBlue ("B6") that flew from JFK to MIA or BQN
jetBlueFlightsData = filter(flightsDataSet, 7 <= month & month <=9 ) # Get month
View(jetBlueFlightsData)
jetBlueFlightsData = filter(jetBlueFlightsData, carrier == "B6")
View(jetBlueFlightsData)
jetBlueFlightsData = filter(jetBlueFlightsData, origin == "JFK" & dest == "MIA"
| dest == "BQN") #get origin & destination
View(flightsDataSet)
#write a script, using select() function, to select subset of data that
#include all columns but the following:  distance, hour, minute, time_hour
excludedColumnsData = select(flightsDataSet, !c(distance, hour, minute, time_hour))
View(flightsDataSet)
View(flightsDataSet)
#write a script, using mutate() function, to add a new column representing flight
#operation costs. In here, the cost of operation for each flight is considered as
#the sum of air-time cost ($5 per hour of air time) and fly distance cost
#($3 per mile traveled)
flightDataAddOperationCost = mutate(flightsDataSet,
flight_operation = (5 * air_time) + (3 * distance))
View(flightDataAddOperationCost)
#write a script, using mutate() function, to add a new column representing flight
#operation costs. In here, the cost of operation for each flight is considered as
#the sum of air-time cost ($5 per hour of air time) and fly distance cost
#($3 per mile traveled)
flightDataAddOperationCost = mutate(flightsDataSet,
oper_cost = (5 * air_time) + (3 * distance))
View(flightDataAddOperationCost)
#write a script that calculates the correlation between every numerical
#column in flights dataset.
numericalFlightData = select(flightDataSet, !c(carrier, tailnum, origin, dest, time_hour))
#write a script that calculates the correlation between every numerical
#column in flights dataset.
numericalFlightData = select(flightsDataSet, !c(carrier, tailnum, origin, dest, time_hour))
#omit non-numerical data...
numericalFlightData = na.omit(numericalFlightData)
View(numericalFlightData)
numericalFlightData = cor(x = numericalFlightData)
View(numericalFlightData)
flightDataCorrelations = cor(x = numericalFlightData, )# Create Correlations
, Sept) that are operated
#write a script that calculates the correlation between every numerical
#column in flights dataset.
numericalFlightData = select(flightsDataSet, !c(carrier, tailnum, origin, dest, time_hour))
#omit non-numerical data...
numericalFlightData = na.omit(numericalFlightData)# omit NA's
flightDataCorrelations = cor(x = numericalFlightData, )# Create Correlations
source("C:/Classes/2023-2024/CS 2020/Homework/CS-DASE-2020/midterm_camilla_lucero.R")
source("C:/Classes/2023-2024/CS 2020/Homework/CS-DASE-2020/midterm_camilla_lucero.R")
